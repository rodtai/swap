package app

import (
	"encoding/json"
	"net/http"

	"github.com/gocql/gocql"
)

// A Group represents a collection of user and chats.
type Group struct {
	ID        string `json:"id"` // autogenerated by db
	Name      string `json:"name"`
	AdminID   string `json:"adminId"`   // id of group admin user
	GroupIcon string `json:"groupIcon"` // icon image
}

// GetGroups streams all the groups belonging to the user.
func (app *App) GetGroups(w http.ResponseWriter, r *http.Request) {
	userID := r.Context().Value(UserUID).(string)
	userGroups, err := app.database.SelectUserGroupsByUserID(userID)
	if err != nil {
		sendErr(w, http.StatusInternalServerError, err.Error())
	}
	groups := make([]Group, 0)
	for _, userGroup := range *userGroups {
		group, err := app.database.SelectGroupByID(userGroup.GroupID)
		if err != nil {
			sendErr(w, http.StatusInternalServerError, err.Error())
			return
		}
		groups = append(groups, *group)
	}
	if err := json.NewEncoder(w).Encode(groups); err != nil {
		sendErr(w, http.StatusInternalServerError, err.Error())
	}
}

// PostNewGroup gets the user's body request and creates a new group.
func (app *App) PostNewGroup(w http.ResponseWriter, r *http.Request) {
	var group Group
	if err := json.NewDecoder(r.Body).Decode(&group); err != nil {
		sendErr(w, http.StatusBadRequest, err.Error())
		return
	}
	// generate new UUID
	id, err := gocql.RandomUUID()
	if err != nil {
		sendErr(w, http.StatusInternalServerError, err.Error())
	}
	group.ID = id.String()
	// set admin id to this user's ID
	group.AdminID = r.Context().Value(UserUID).(string)
	if err := app.database.InsertGroup(group); err != nil {
		sendErr(w, http.StatusBadRequest, err.Error())
		return
	}
	user, err := app.database.SelectUserByID(group.AdminID)
	if err != nil {
		sendErr(w, http.StatusInternalServerError, err.Error())
		return
	}
	userGroup := UserGroup{
		UserID:   group.AdminID,
		GroupID:  group.ID,
		GroupIdx: user.NumGroups + 1,
	}
	if err := app.database.InsertNewUserGroup(userGroup); err != nil {
		sendErr(w, http.StatusInternalServerError, err.Error())
		return
	}
	user.NumGroups++
	if err := app.database.UpdateUserByID(*user); err != nil {
		sendErr(w, http.StatusInternalServerError, err.Error())
		return
	}
	if err := json.NewEncoder(w).Encode(group); err != nil {
		sendErr(w, http.StatusInternalServerError, err.Error())
		return
	}
}

// InsertGroup creates a new group.
func (db *Database) InsertGroup(group Group) error {
	query := db.currentSession.Query(db.groupTable.Insert()).BindStruct(group)
	if err := query.ExecRelease(); err != nil {
		return err
	}
	return nil
}

// SelectGroupByID returns a *User by its id and returns an error if the query fails.
func (db *Database) SelectGroupByID(id string) (*Group, error) {
	group := Group{
		ID:        id,
		Name:      "",
		AdminID:   "",
		GroupIcon: "",
	}
	query := db.currentSession.Query(db.groupTable.Get()).BindStruct(group)
	if err := query.GetRelease(&group); err != nil {
		return &group, err
	}
	return &group, nil
}
